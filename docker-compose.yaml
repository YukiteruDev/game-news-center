services:
  backend-dev:
    container_name: news-backend-dev
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
    env_file:
      - ./.env
    volumes:
      - .:/app
      - /app/node_modules
      - /app/backend/node_modules
      - puppeteer_cache:/root/.cache/puppeteer
    command: >
      sh -c "
        echo 'Checking/Installing Chrome for Puppeteer...' &&
        # Check if Chrome executable exists in the expected cache path within the volume
        # Adjust the path slightly if puppeteer version installs differently, check via 'ls' if needed
        if [ ! -f "/root/.cache/puppeteer/chrome/linux-$(pnpm view puppeteer version | sed 's/\./-/g')/chrome-linux64/chrome" ]; then
          echo 'Chrome not found in cache volume, installing...' &&
          # Force install into the specific cache directory (mapped to the volume)
          pnpm dlx puppeteer browsers install chrome --path /root/.cache/puppeteer;
        else
          echo 'Chrome found in cache volume.';
        fi &&
        echo 'Running database migrations...' &&
        pnpm --filter backend run migrate:up &&
        echo 'Starting application...' &&
        pnpm --filter backend run dev
      "
    networks:
      - news-network
    depends_on:
      db:
        condition: service_healthy

  frontend-dev:
    container_name: news-frontend-dev
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    ports:
      - '5173:5173'
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - .:/app
      - /app/node_modules
      - /app/frontend/node_modules
    depends_on:
      - backend-dev
    command: pnpm --filter frontend run dev --host

  db:
    image: postgres:17-alpine
    container_name: news-db-dev
    restart: always
    # environment:
    #   DB_NAME: game_news_db
    #   DB_USER: news_dev
    #   DB_PASSWORD: news_pass
    #   DB_HOST: db
    #   NODE_ENV: development
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    networks:
      - news-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  news-network:
    driver: bridge

volumes:
  postgres_data:
  puppeteer_cache:
